3.3 Проектирование базы данных

В качестве системы управления базами данных выбрана PostgreSQL, как надежная и производительная СУБД с поддержкой сложных запросов и транзакций. База данных спроектирована с учетом требований масштабируемости, производительности и целостности данных.

3.3.1 Структура базы данных

База данных состоит из четырех основных таблиц, связанных между собой отношениями:
1. telegram_users - таблица пользователей
2. categories - таблица категорий задач
3. tasks - таблица задач
4. notification_history - таблица истории уведомлений

3.3.2 Описание таблиц

3.3.2.1 Таблица telegram_users

Таблица хранит информацию о пользователях, авторизованных через Telegram:

Поля таблицы:
- user_id (SERIAL PRIMARY KEY) - уникальный идентификатор пользователя
- telegram_chat_id (BIGINT) - идентификатор чата в Telegram
- username (VARCHAR(50)) - имя пользователя в Telegram
- first_name (VARCHAR(100)) - имя пользователя
- last_name (VARCHAR(100)) - фамилия пользователя
- is_active (BOOLEAN) - статус активности аккаунта
- created_at (TIMESTAMP) - дата и время создания записи

Особенности:
- Поле telegram_chat_id имеет ограничение UNIQUE
- Автоматическое заполнение даты создания
- Индекс по полю telegram_chat_id для быстрого поиска

3.3.2.2 Таблица categories

Таблица хранит категории задач, созданные пользователями:

Поля таблицы:
- category_id (VARCHAR(50)) - идентификатор категории
- user_id (INTEGER) - идентификатор пользователя
- name (VARCHAR(100)) - название категории
- color (VARCHAR(7)) - цветовой код категории
- is_default (BOOLEAN) - признак категории по умолчанию
- created_at (TIMESTAMP) - дата и время создания

Особенности:
- Составной первичный ключ (category_id, user_id)
- Внешний ключ на таблицу telegram_users
- Уникальное сочетание user_id и name
- Каскадное удаление при удалении пользователя

3.3.2.3 Таблица tasks

Центральная таблица, хранящая все задачи пользователей:

Поля таблицы:
- task_id (SERIAL PRIMARY KEY) - уникальный идентификатор задачи
- user_id (INTEGER) - идентификатор пользователя
- category_id (VARCHAR(50)) - идентификатор категории
- title (VARCHAR(100)) - название задачи
- description (TEXT) - описание задачи
- due_date (TIMESTAMP) - срок выполнения
- status (VARCHAR(20)) - статус задачи ('active', 'completed', 'archived')
- created_at (TIMESTAMP) - дата создания
- completed_at (TIMESTAMP) - дата выполнения
- order (INTEGER) - порядковый номер для сортировки
- notifications_enabled (BOOLEAN) - включены ли уведомления
- notification_time (TIMESTAMP) - время следующего уведомления

Особенности:
- Внешние ключи на таблицы telegram_users и categories
- Каскадное удаление при удалении пользователя
- Установка NULL для category_id при удалении категории
- Автоматическое заполнение порядкового номера через триггер
- Проверка допустимых значений статуса через CHECK

3.3.2.4 Таблица notification_history

Таблица для отслеживания отправленных уведомлений:

Поля таблицы:
- notification_id (SERIAL PRIMARY KEY) - идентификатор уведомления
- task_id (INTEGER) - идентификатор задачи
- user_id (INTEGER) - идентификатор пользователя
- sent_at (TIMESTAMP) - время отправки
- notification_type (VARCHAR(20)) - тип уведомления
- status (VARCHAR(20)) - статус отправки ('sent', 'failed', 'delivered')

Особенности:
- Внешние ключи на таблицы tasks и telegram_users
- Каскадное удаление при удалении задачи
- Проверка допустимых значений статуса через CHECK

3.3.3 Индексы

Для оптимизации производительности созданы следующие индексы:

1. Индексы для таблицы tasks:
   - idx_tasks_user_id - поиск задач пользователя
   - idx_tasks_category_id - фильтрация по категориям
   - idx_tasks_due_date - сортировка по сроку
   - idx_tasks_status - фильтрация по статусу
   - idx_tasks_notification - поиск задач с уведомлениями

2. Индексы для других таблиц:
   - idx_telegram_users_chat_id - поиск пользователя по chat_id
   - idx_categories_user_id - поиск категорий пользователя

3.3.4 Триггеры

В базе данных реализован триггер update_task_order для автоматического управления порядком задач:

Функционал триггера:
- Срабатывает перед вставкой новой задачи
- Автоматически определяет порядковый номер
- Учитывает существующие задачи пользователя
- Поддерживает группировку по статусу

3.3.5 Целостность данных

Для обеспечения целостности данных используются:

1. Внешние ключи:
   - Связь tasks с telegram_users
   - Связь tasks с categories
   - Связь notification_history с tasks

2. Ограничения:
   - Уникальность telegram_chat_id
   - Уникальность имен категорий для пользователя
   - Проверка допустимых значений статусов

3. Каскадные действия:
   - Удаление связанных задач при удалении пользователя
   - Удаление истории уведомлений при удалении задачи
   - Обнуление категории при её удалении

3.3.6 Масштабируемость

База данных спроектирована с учетом возможного роста:
- Эффективные типы данных
- Оптимальные индексы
- Поддержка партиционирования
- Возможность архивации старых данных
- Подготовка к репликации 