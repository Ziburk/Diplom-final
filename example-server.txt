3.1.2 Проектирование API

Обмен данными по протоколу HTTP заключается в том, что клиент будет обращаться по заданному при проектировании URL с различными параметрами (например HTTP-методами GET, POST, DELETE или PUT) и телом запроса и получать в ответ данные в JSON формате. Следует отметить, что протокол и домен, входящие в состав URL, будут неизменяемыми поэтому при проектировании будет указываться только путь к необходимому ресурсу. Например, URL, вида «http://vkr.com/api/v1/videos», где путь к ресурсу это «/api/v1/videos».

3.1.2.1 Проектирование API административной панели
3.1.2.1.1 Страница «Видео»

	На данной странице административной панели, пользователь, согласно техническому заданию, должен иметь возможность:
- загружать и удалять видео;
- формировать плейлист из загруженных видео;
- менять название уже загруженных видео. 
Сформируем запросы для взаимодействия с коллекцией видео. Для получения коллекции видео клиент должен прислать GET-запрос по пути «/api/v1/videos» и в параметрах запроса указать лимит и смещение, необходимые для пагинации данных. По умолчанию лимит получаемых за один запрос видео из коллекции равен 20, а смещение 0. Пример запроса «/api/v1/videos?limit=30&offset=10». В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.1.

 

Рисунок 3.1.2.1.1 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/videos»

	Сформируем запрос для загрузки видео на сервер. Клиент должен прислать POST запрос по пути «/api/v1/videos/upload» с телом формата «MultipartFormData», в котором должно быть поле «videoFile» с приложенным файлом. В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.2

 

Рисунок 3.1.2.1.2 – Формат тела ответа на HTTP POST-запрос по пути «/api/v1/videos/upload»

	Сформируем запрос для получения загруженного видео с сервера. Чтобы получить загруженное ранее на сервер видео, необходимо послать GET-запрос по пути «/api/v1/videos/download/:id», где вместо «:id» необходимо вставить идентификатор видео. В ответе клиент получит поток данных.
	Сформируем запрос для получения текущего плейлиста. Чтобы получить текущий плейлист, клиенту необходимо послать GET-запрос по пути «/api/v1/videos/settings». В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.3.

 

Рисунок 3.1.2.1.3 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/videos/settings»

	Сформируем запрос для изменения имени уже загруженного видео. Чтобы изменить имя загруженного видео клиенту необходимо послать PUT-запрос по пути «/api/v1/videos/download/:id», где вместо «:id» необходимо вставить идентификатор видео, в теле запроса необходимо указать новое имя. На рисунке 3.1.2.1.4 представлен пример тела запроса.

 

Рисунок 3.1.2.1.4 – Формат тела HTTP PUT-запроса по пути «/api/v1/videos/:id» 

	Сохранение нового плейлиста будет проходить по тому же пути, но с другим телом запроса и методом. Чтобы сохранить новый плейлист клиенту необходимо отправить POST запрос с телом запроса, указанном на рисунке 3.1.2.1.5.

 

Рисунок 3.1.2.1.5 – Формат тела HTTP POST-запроса по пути «/api/v1/videos/settings»

	Здесь поле «playlist» представляет из себя упорядоченный массив идентификаторов видео, и поле «is_preview» отвечает за флаг предпросмотра.

3.1.2.1.2 Страница «Фото»

	На данной странице пользователь согласно техническому заданию должен иметь возможность:
- сохранить HTML-открытку;
- загрузить фото;
- запланировать показ фото или HTML-открытки;
- изменить имя открытки или фото.
Cформируем запросы для загрузки и получения уже загруженных фото. Чтобы загрузить фото на сервер, клиент должен послать POST по пути «/api/v1/photos/upload?type=images» с телом запроса формата «MultipartFormData» с полем «photoFile», в котором будет приложен файл изображениия. В ответе клиент получит данные формата, указанного на рисунке 3.1.2.1.6.

 

Рисунок 3.1.2.1.6 – Формат тела ответа на HTTP POST-запрос по пути «/api/v1/photos/upload?type=images»

	Чтобы получить список уже загруженных на сервер фотографий, клиенту необходимо отправить GET-запрос по пути «/api/v1/photos?type=images» и в параметрах запроса указать лимит и смещение необходимые для пагинации данных. По умолчанию лимит получаемых за один запрос фото из коллекции равен 20, а смещение 0. Пример запроса «/api/v1/photos?limit=30&offset=10». В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.7

 

Рисунок 3.1.2.1.7 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/photos?type=images»

	Чтобы изменить имя уже загруженной фотографии, клиенту необходимо отправить PUT-запрос по пути «/api/v1/photos/:id», где вместо «:id» необходимо вставить идентификатор фото, а в теле запроса необходимо указать новое имя. На рисунке 3.1.2.1.8 представлен пример тела запроса.

 

Рисунок 3.1.2.1.8 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/photos/:id»

	Сформируем запрос сохранения HTML-открытки. Чтобы сохранить открытку, клиенту необходимо послать POST-запрос по пути «/api/v1/postcards» с телом запроса, представленным на рисунке 3.1.2.1.9.

 

Рисунок 3.1.2.1.9 – Формат тела HTML POST-запроса по пути «/api/v1/postcards»

	Чтобы получить список уже сохранённых открыток, клиенту необходимо отправить GET-запрос по пути «/api/v1/postcards» и в параметрах запроса указать лимит и смещение необходимые для пагинации данных. По умолчанию лимит получаемых за один запрос открыток из коллекции равен 20, а смещение 0. Пример запроса «/api/v1/postcards?limit=30&offset=10». В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.10

 

Рисунок 3.1.2.1.10 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/postcards»

Чтобы изменить имя уже сохраненной открытки, клиенту необходимо отправить PUT-запрос по пути «/api/v1/postcards/:id», где вместо «:id» необходимо вставить идентификатор открытки, а в теле запроса необходимо указать новое имя. На рисунке 3.1.2.1.11 представлен пример тела запроса.

 

Рисунок 3.1.2.1.11 – Формат тела ответа на HTTP PUT-запрос по пути «/api/v1/postcards/:id»

	Сформируем запрос для отображения фото или открытки в заданное время. Клиенту необходимо отправить POST-запрос по пути «/api/v1/photos/settings» с телом запроса, представленным на рисунке 3.1.2.1.12.

 

Рисунок 3.1.2.1.12 – Формат тела HTTP POST-запроса по пути «/api/v1/photos/settings»

	Здесь поле «show_immediately» отвечает за флаг немедленного показа, «show_by_time» отвечает за флаг показа по дате и времени, «datetime» отвечает за дату и время, в которые необходимо показать картинку или открытку, «is_preview» отвечает за флаг предпросмотра. Поля «идентификатор фото» и «идентификатор открытки» опциональны. Если необходимо показать фото, то указывается только идентификатор фото, если открытку, то идентификатор открытки.

3.1.2.1.3 Страница «Фотофон»

	На данной странице административной панели пользователь согласно техническому заданию должен иметь следующие возможности:
- задать фон из списка загруженных фонов;
- загрузить фон;
- изменить имя фона.
Сформируем запросы для загрузки фона и получения списка загруженных фотофонов. Для загрузки нового фона клиент должен послать POST-запрос по пути «/api/v1/photos/upload?type=background» с телом запроса формата «MultipartFormData» с полем «photoFile», в котором будет приложен файл картинки. В ответе клиент получит данные формата, указанного на рисунке 3.1.2.1.13.

 

Рисунок 3.1.2.1.13 – Формат тела ответа на HTTP POST-запрос по пути «/api/v1/photos/upload?type=background»

	Чтобы получить список уже загруженных на сервер фонов, клиенту необходимо отправить GET запрос по пути «/api/v1/photos?type=background» и в параметрах запроса указать лимит и смещение необходимые для пагинации данных. По умолчанию лимит получаемых за один запрос фонов из коллекции равен 20, а смещение 0. Пример запроса «/api/v1/photos?limit=30&offset=10». В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.14

 

Рисунок 3.1.2.1.14 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/photos?type=background»

Чтобы изменить имя уже загруженного фона, клиенту необходимо отправить PUT запрос по пути «/api/v1/photos/:id», где вместо «:id» необходимо вставить идентификатор фона, а в теле запроса необходимо указать новое имя. На рисунке 3.1.2.1.15 представлен пример тела запроса.

 

Рисунок 3.1.2.1.15 – Формат тела HTTP PUT-запроса по пути «/api/v1/photos/:id»

	Чтобы задать настройки фона, клиенту необходимо отправить POST-запрос по пути «/api/v1/background/settings» с телом запроса, представленным на рисунке 3.1.2.1.16

 

Рисунок 3.1.2.1.16 – Формат тела HTTP GET-запроса по пути «/api/v1/photos/:id»

	Чтобы получить текущие настройки фона, клиенту необходимо отправить GET-запрос по пути «/api/v1/background/settings». Тело ответа представлено на рисунке 3.1.2.1.17.

 

Рисунок 3.1.2.1.17 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/background/settings»

3.1.2.4 Страница «Приветствие»

	Согласно техническому заданию на данной странице у пользователя должна быть возможность:
- загрузить логотип;
- установить настройки виджета приветствия;
- изменить имя логотипа.
Сформируем запрос для загрузки логотипа и получения уже загруженных. Чтобы загрузить логотип, клиенту необходимо послать POST-запрос по пути «/api/v1/photos/upload?type=logo» с телом запроса формата «MultipartFormData» с полем «photoFile» в котором будет вложен файл изображения. В ответе клиент получит данные формата, указанного на рисунке 3.1.2.1.18.

 

Рисунок 3.1.2.1.18 – Формат тела ответа на HTTP POST-запрос по пути «/api/v1/photos/upload?type=logo»

	Чтобы получить список уже загруженных на сервер логотипов, клиенту необходимо отправить GET-запрос по пути «/api/v1/photos?type=logo» и в параметрах запроса указать лимит и смещение необходимые для пагинации данных. По умолчанию лимит получаемых за один запрос логотипов из коллекции равен 20, а смещение 0. Пример запроса «/api/v1/photos?limit=30&offset=10». В теле ответа клиент получит данные в формате, указанном на рисунке 3.1.2.1.19.

 

Рисунок 3.1.2.1.19 – Формат ответа на HTTP GET-запрос по пути «/api/v1/photos?type=logo»

Чтобы изменить имя уже загруженного логотипа, клиенту необходимо отправить PUT запрос по пути «/api/v1/photos/:id», где вместо «:id» необходимо вставить идентификатор логотипа, а в теле запроса необходимо указать новое имя. На рисунке 3.1.2.1.20 представлен пример тела запроса.

 

Рисунок 3.1.2.1.20 – Формат тела HTTP PUT-запроса по пути «/api/v1/photos/:id»

	Сформируем запрос для установки настроек виджета приветствия. Клиенту необходимо отправить POST-запрос по пути «/api/v1/greeting/settings» с телом запроса, представленным на рисунке 3.1.2.1.21.

 

Рисунок 3.1.2.1.21 – Формат тела HTTP POST-запроса по пути «/api/v1/greeting/settings»

	Чтобы получить текущие настройки виджета приветствия, клиенту необходимо послать GET-запрос по пути «/api/v1/greeting/settings». Тело ответа на данный запрос представлено на рисунке 3.1.2.1.21.

3.1.2.5 Страница «Погода»

	Согласно техническому заданию на данной странице у пользователя должна быть возможность:
- выбрать 4 города для отображения погоды;
- изменить порядок отображения городов.
Сформируем запрос для формирования списка погоды. Клиенту необходимо отправить POST-запрос по пути «/api/v1/weather», передав в теле запроса данные в формате, указанном на рисунке 3.1.2.1.22.

 

Рисунок 3.1.2.1.22 – Формат тела HTTP POST-запроса по пути «/api/v1/weather»

Для получения текущих настроек погоды клиенту необходимо отправить GET запрос по пути «/api/v1/weather». Тело ответа будет содержать данные формата, представленного на рисунке 3.1.2.1.22.

3.1.2.6 Страница «ВКонтакте»
	
	На данной странице согласно техническому заданию пользователь должен иметь возможность:
- задать «id» сообщества социальной сети ВКонтакте;
- посмотреть список импортированных постов сообщества ВКонтакте;
- отфильтровать посты по заданному промежутку времени;
- добавить посты в список на отображение;
- выбрать посты для отображения;
- изменить порядок отображения постов.
Сформируем запросы для реализации требуемых возможностей. Чтобы задать «id» сообщества социальной сети ВКонтакте, клиент должен послать POST-запрос по пути «/api/v1/vk/app» с телом запроса, указанным на рисунке 3.1.2.1.23.

 

Рисунок 3.1.2.1.23 – Формат тела HTTP POST-запроса по пути «/api/v1/vk/app»
	
	Чтобы получить текущие настройки сообщества, клиенту необходимо послать GET-запрос по пути «/api/v1/vk/app». Формат тела ответа представлен на рисунке 3.1.2.1.24.

 

Рисунок 3.1.2.1.24 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/vk/app»

	Для получение текущей коллекции постов, импортированных из заданного сообщества социальной сети ВКонтакте, клиенту необходимо послать GET-запрос по пути «/api/v1/vk/posts». Для фильтрации постов по заданному интервалу времени в пути запроса необходимо указать параметры стартовой временной метки «timestamp_from» и конечной временной метки «timestamp_to». Также для просмотра полной коллекции или только избранных для списка отображения постов необходимо указать параметр «is_favorite». Поскольку список импортированных постов может быть очень длинным, необходимо указать параметры для пагинации данных. По умолчанию лимит получаемых за один запрос постов из коллекции равен 20, а смещение 0. Пример пути с параметрами «/api/v1/vk/posts?timestam_from=1654633839&timestamp_to= 1654633839&is_favorite=false». Формат тела ответа на данный запрос представлен на рисунке 3.1.2.1.25

 

Рисунок 3.1.2.1.26 – Формат тела ответа на HTTP GET-запрос по пути «/api/v1/vk/posts»
	Чтобы задать посты для отображения, а также установить время их перехода, клиенту необходимо отправить POST-запрос по пути «/api/v1/vk/posts/settings» с телом, формат которого указан на рисунке 3.1.2.1.27.

 

Рисунок 3.1.2.1.27 – Формат тела ответа на HTTP POST-запрос по пути «/api/v1/vk/posts/settings»
	
	Для включения поста в список отображения, клиенту необходимо отправить PUT-запрос по пути «/api/v1/vk/posts/:id», где вместо «:id» необходимо указать идентификатор поста.

3.1.3 Разработка алгоритма взаимодействия с клиентом через WebSocket

	Исходя из технического задания требуется необходимость обновления web-интерфейса стенда в реальном времени в соответствии с заданными настройками, поэтому необходимо организовать связь между серверным приложением и клиентом при помощи протокола WebSocket. Для ускорения процесса разработки серверного и клиентского приложений будет использоваться готовая библиотека, написанная на языке программирования JavaScript – Socket IO. Данная библиотека предоставляет уже готовый интерфейс взаимодействия через WebSocket. 
Алгоритм будет построен на событийной архитектуре. Основными событиями (event) будет обновление настроек администратором в панели и успешно установленное соединение. Необходимо уведомить всех клиентов, подключенных через WebSocket, о том, что настройки были изменены и передать новый объект настроек. Для упрощения задачи все настройки было решено свести в единый объект, который в последствии переводится в строку JSON-формата. На рисунке 3.1.3.1 изображен алгоритм взаимодействия через протокол WebSocket.

 

Рисунок 3.1.3.1 – Алгоритм взаимодействия через протокол WebSocket

	Сначала клиент посылает HTTP-запрос серверу на установку WebSocket-соединения. Если сервер поддерживает данный протокол, он отвечает клиенту подтверждением и устанавливается WebSocket-соединение. При успешной установке соединения срабатывает событие «open», и сервер отсылает текущий объект настроек. Когда администратор в панели изменяет настройки, сервер отсылает на все успешно установленные соединения событие «updateData» с текущем объектом настроек. На рисунке Б.1 изображен формат объекта настроек.

3.1.4 Интеграция с сервисом ВКонтакте

	Исходя из технического задания необходимо импортировать посты из сообщества, заданного пользователем в административной панели. Социальная сеть ВКонтакте предоставляет API, при помощи которого можно взаимодействовать с базой данных ВКонтакте, но для этого необходимо создать Standalone-приложение ВКонтакте.

3.1.4.1 Создание Standalone-приложения ВКонтакте

	Создание начинается с авторизации в социальной сети ВКонтакте. После этого шага необходимо перейти на сайт социальной сети ВКонтакте для разработчиков по ссылке «https://dev.vk.com». На рисунке 3.1.4.1 изображена главная страница.

 

Рисунок 3.1.4.1 – Главная страница по ссылке «https://dev.vk.com»

	Чтобы начать создание приложения, на главной странице необходимо нажать кнопку «Создать приложение», затем откроется страница, где необходимо выбрать платформу «Standalone-приложение» и ввести название, для завершения процесса необходимо нажать кнопку «Подключить приложение». На рисунке 3.1.4.2 показана форма создания приложения.

 

Рисунок 3.1.4.2 – Форма создания приложения ВКонтакте

	После того как приложение было подключено, необходимо перейти в пункт меню «Настройки», где будут доступны ID-приложения и сервисный ключ доступа, которые в дальнейшем будут использоваться для взаимодействия с API социальной сети ВКонтакте. На рисунке 3.1.4.3 изображен экран настроек приложения.

 

Рисунок 3.1.4.3 – Экран настроек приложения ВКонтакте
 
3.1.4.2 Импорт постов и данных сообщества

	Импорт данных из социальной сети ВКонтакте происходит при помощи API. Согласно представленной документации, расположенной по адресу «https://dev.vk.com/method», для импорта данных сообщества необходимо послать HTTP GET-запрос на URL «https://api.vk.com/method/groups.getById», передав в параметрах запроса сервисный ключ, и идентификатор группы, заданный пользователем в административной панели. В ответ придут данные в формате, указанном на рисунке 3.1.4.4. Блок-схема алгоритма импорта данных сообщества представлена на рисунке В.1.

 

Рисунок 3.1.4.4 – Формат ответа на HTTP GET-запрос на URL «https://api.vk.com/method/groups.getById»

	Чтобы импортировать посты из заданного пользователем сообщества, необходимо отправить HTTP GET-запрос на URL «https://api.vk.com/method/wall.get», передав в параметрах сервисный ключ, идентификатор сообщества, количество импортируемых за раз постов и смещение. Поскольку постов может быть слишком много, имеет смысл делать импорт итеративным по 100 постов. Изначально будет импортировано 600 постов, которые будут отфильтрованы по наличию в них изображения и текста. На рисунке В.2 представлена блок-схема алгоритма импорта постов. Рисунок 3.1.4.5 отображает формат ответа.

 

Рисунок 3.1.4.5 – Формат ответа на HTTP GET-запрос на URL «https://api.vk.com/method/wall.get»

3.1.5 Интеграция с сервисом OpenWeatherMap

	Данный сервис является погодным. Предоставляет информацию о текущей погоде в различных городах. Для взаимодействия с ним необходимо пройти регистрацию на сайте «https://openweathermap.org/» и получить сервисный ключ, который в дальнейшем необходимо посылать вместе с запросами к API данного сервиса. Чтобы получить информацию о погоде в каком-либо городе необходимо послать HTTP GET-запрос на URL «https://api.openweathermap.org/data/2.5/weather», а в параметрах запроса согласно документации к API данного сервиса указать имя города, единицы измерения и сервисный ключ. В ответ придут данные в формате, представленном на рисунке 3.1.5.1.
 

Рисунок 3.1.5.1 – Формат ответа на HTTP GET-запрос на URL «https://api.openweathermap.org/data/2.5/weather»

	Блок-схема алгоритма импорта данных о погоде в городах заданных пользователем представлена на рисунке В.3.
