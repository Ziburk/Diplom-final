const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Å—Å–∏–π
const { session } = require('telegraf');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω)
const bot = new Telegraf('8149852561:AAGnlLUr0ba-1C2WYnM1gKmba_0n-vqtNNM');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
bot.use(session());

// –ò–∑–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
let users = {
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
    // userId: {
    //     tasks: {
    //         active: [],
    //         completed: []
    //     },
    //     categories: {...}
    // }
};

// –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initializeUserData(userId) {
    if (!users[userId]) {
        users[userId] = {
            tasks: {
                active: [],
                completed: []
            },
            categories: {
                'other': {
                    id: 'other',
                    name: '–û–±—â–µ–µ',
                    color: '#607D8B'
                },
                'work': {
                    id: 'work',
                    name: '–†–∞–±–æ—Ç–∞',
                    color: '#FF5252'
                },
                'personal': {
                    id: 'personal',
                    name: '–õ–∏—á–Ω–æ–µ',
                    color: '#69F0AE'
                },
                'shopping': {
                    id: 'shopping',
                    name: '–ü–æ–∫—É–ø–∫–∏',
                    color: '#448AFF'
                }
            }
        };
    }
    return users[userId];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
function loadData() {
    try {
        if (fs.existsSync('users.json')) {
            users = JSON.parse(fs.readFileSync('users.json'));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        users = {};
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    try {
        fs.writeFileSync('users.json', JSON.stringify(users));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    if (!dateString) return '–ë–µ–∑ —Å—Ä–æ–∫–∞';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function createCalendarKeyboard(selectedDate = null) {
    const date = selectedDate ? new Date(selectedDate) : new Date();
    const month = date.getMonth();
    const year = date.getFullYear();
    
    const keyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    
    keyboard.push([
        Markup.button.callback('‚Üê', `calendar:${year}:${month-1}`),
        Markup.button.callback(`${monthNames[month]} ${year}`, 'ignore'),
        Markup.button.callback('‚Üí', `calendar:${year}:${month+1}`)
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    keyboard.push(['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day =>
        Markup.button.callback(day, 'ignore')
    ));
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(year, month, 1);
    let firstDayIndex = firstDay.getDay() || 7; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0) –≤ 7
    firstDayIndex--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    let currentRow = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    for (let i = 0; i < firstDayIndex; i++) {
        currentRow.push(Markup.button.callback(' ', 'ignore'));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
        currentRow.push(Markup.button.callback(
            day.toString().padStart(2, ' '),
            `select_date:${year}:${month}:${day}`
        ));
        
        if (currentRow.length === 7) {
            keyboard.push(currentRow);
            currentRow = [];
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    while (currentRow.length > 0 && currentRow.length < 7) {
        currentRow.push(Markup.button.callback(' ', 'ignore'));
        if (currentRow.length === 7) {
            keyboard.push(currentRow);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –¥–∞—Ç—ã"
    keyboard.push([Markup.button.callback('–ë–µ–∑ –¥–∞—Ç—ã', 'select_date:no_date')]);
    
    return keyboard;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ToDo List –±–æ—Ç!\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n' +
        '/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n' +
        '/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        Markup.keyboard([
            ['üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'],
            ['üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['‚ùì –ü–æ–º–æ—â—å']
        ]).resize()
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
    ctx.reply(
        '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n' +
        '/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n' +
        '/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears('üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', (ctx) => startAddingTask(ctx));
bot.hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', (ctx) => showTasksList(ctx));
bot.hears('üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', (ctx) => showCategories(ctx));
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => showStats(ctx));
bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) => {
    ctx.reply(
        '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n' +
        '/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n' +
        '/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.'
    );
});

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function startAddingTask(ctx) {
    const userId = ctx.from.id;
    initializeUserData(userId);
    
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
    ctx.session = { 
        state: 'waiting_task_name',
        userId: userId
    };
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function showTasksList(ctx) {
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    
    const activeTasksList = userData.tasks.active.map((task, index) => {
        const category = userData.categories[task.category] || userData.categories.other;
        return `${index + 1}. ${task.title}\n` +
            `üìÖ ${formatDate(task.dueDate)}\n` +
            `üè∑ ${category.name}\n`;
    }).join('\n');

    const completedTasksList = userData.tasks.completed.map((task, index) => {
        const category = userData.categories[task.category] || userData.categories.other;
        return `${index + 1}. ‚úÖ ${task.title}\n` +
            `üìÖ ${formatDate(task.dueDate)}\n` +
            `üè∑ ${category.name}\n`;
    }).join('\n');

    const message =
        'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n' +
        (activeTasksList || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á') +
        '\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n' +
        (completedTasksList || '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

    ctx.reply(message, Markup.inlineKeyboard([
        [Markup.button.callback('–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', 'complete_task'),
        Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', 'change_date')],
        [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'change_category'),
        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å', 'delete_task')]
    ]));
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function showCategories(ctx) {
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    
    const categoriesList = Object.values(userData.categories).map(cat =>
        `üè∑ ${cat.name}`
    ).join('\n');

    ctx.reply(
        'üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n' + categoriesList,
        Markup.inlineKeyboard([
            [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'add_category')],
            [Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'show_by_category')]
        ])
    );
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function showStats(ctx) {
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    
    const totalTasks = userData.tasks.active.length + userData.tasks.completed.length;
    const activeTasksCount = userData.tasks.active.length;
    const completedTasksCount = userData.tasks.completed.length;

    const completionRate = totalTasks > 0
        ? Math.round((completedTasksCount / totalTasks) * 100)
        : 0;

    ctx.reply(
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:\n\n' +
        `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}\n` +
        `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasksCount}\n` +
        `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedTasksCount}\n` +
        `–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${completionRate}%`
    );
}

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–∏–Ω
bot.on('text', async (ctx) => {
    if (!ctx.session) return;

    const userId = ctx.from.id;
    const userData = initializeUserData(userId);

    switch (ctx.session.state) {
        case 'waiting_task_name':
            ctx.session.newTask = { 
                title: ctx.message.text,
                userId: userId
            };
            const categoryButtons = Object.values(userData.categories).map(cat => [
                Markup.button.callback(cat.name, `select_category:${cat.id}`)
            ]);
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard(categoryButtons));
            ctx.session.state = 'waiting_category';
            break;

        case 'waiting_date':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
            const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
            const match = ctx.message.text.match(dateRegex);

            if (match) {
                const [_, day, month, year] = match;
                const date = new Date(year, month - 1, day);
                ctx.session.newTask.dueDate = date.toISOString();

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                userData.tasks.active.unshift({
                    ...ctx.session.newTask,
                    originalPosition: userData.tasks.active.length
                });

                saveData();
                await ctx.reply('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëç');
                delete ctx.session;
            } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì');
            }
            break;

        case 'waiting_complete_number':
            const completeIndex = parseInt(ctx.message.text) - 1;
            if (completeIndex >= 0 && completeIndex < userData.tasks.active.length) {
                const task = userData.tasks.active[completeIndex];
                task.lastStatusChange = new Date().toISOString();
                userData.tasks.completed.unshift(task);
                userData.tasks.active.splice(completeIndex, 1);
                saveData();
                await ctx.reply('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! ‚úÖ');
                showTasksList(ctx); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.');
            }
            delete ctx.session;
            break;

        case 'waiting_change_date':
            const [taskNum, newDate] = ctx.message.text.split(' ');
            const dateRegexChange = /^(\d{2})\.(\d{2})\.(\d{4})$/;
            const matchChange = newDate?.match(dateRegexChange);

            if (matchChange) {
                const [_, day, month, year] = matchChange;
                const taskIndex = parseInt(taskNum) - 1;

                if (taskIndex >= 0 && taskIndex < userData.tasks.active.length) {
                    const date = new Date(year, month - 1, day);
                    userData.tasks.active[taskIndex].dueDate = date.toISOString();
                    saveData();
                    await ctx.reply('–î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üìÖ');
                    showTasksList(ctx); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                } else {
                    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.');
                }
            } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
            }
            delete ctx.session;
            break;

        case 'waiting_delete_number':
            const deleteIndex = parseInt(ctx.message.text) - 1;
            if (deleteIndex >= 0 && deleteIndex < userData.tasks.active.length) {
                userData.tasks.active.splice(deleteIndex, 1);
                saveData();
                await ctx.reply('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞! üóë');
                showTasksList(ctx); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.');
            }
            delete ctx.session;
            break;

        case 'waiting_change_category_number':
            const changeCatIndex = parseInt(ctx.message.text) - 1;
            if (changeCatIndex >= 0 && changeCatIndex < userData.tasks.active.length) {
                ctx.session.taskToChange = changeCatIndex;
                const categoryButtons = Object.values(userData.categories).map(cat => [
                    Markup.button.callback(cat.name, `change_task_category:${cat.id}`)
                ]);
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                    Markup.inlineKeyboard(categoryButtons)
                );
                ctx.session.state = 'waiting_new_category';
            } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.');
                delete ctx.session;
            }
            break;

        case 'waiting_category_name':
            const categoryName = ctx.message.text.trim();

            if (categoryName === userData.categories.other.name) {
                await ctx.reply('–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            const exists = Object.values(userData.categories).some(cat => cat.name === categoryName);
            if (exists) {
                await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
                return;
            }

            // –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const colorPalette = [
                '#FF5252', '#FFD740', '#69F0AE', '#448AFF', '#B388FF',
                '#FF80AB', '#7C4DFF', '#64FFDA', '#FF8A80', '#EA80FC',
                '#8C9EFF', '#80D8FF', '#A7FFEB', '#CCFF90', '#FFFF8D'
            ];

            const randomColor = colorPalette[Math.floor(Math.random() * colorPalette.length)];
            const newId = generateCategoryId();

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            userData.categories[newId] = {
                id: newId,
                name: categoryName,
                color: randomColor
            };

            saveData();
            await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üé®`);
            delete ctx.session;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            showCategories(ctx);
            break;

        case 'waiting_change_date_number':
            const taskIndex = parseInt(ctx.message.text) - 1;
            if (taskIndex >= 0 && taskIndex < userData.tasks.active.length) {
                ctx.session.taskToChange = taskIndex;
                await ctx.reply(
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:',
                    Markup.inlineKeyboard(createCalendarKeyboard())
                );
                ctx.session.state = 'waiting_new_date';
            } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.');
                delete ctx.session;
            }
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
bot.action(/select_category:(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    
    if (ctx.session?.state === 'waiting_category') {
        ctx.session.newTask.category = ctx.match[1];
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:',
            Markup.inlineKeyboard(createCalendarKeyboard())
        );
        ctx.session.state = 'waiting_date';
    }
    
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
bot.action('complete_task', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:');
    ctx.session = { state: 'waiting_complete_number' };
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"
bot.action('change_date', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:');
    ctx.session = { state: 'waiting_change_date_number' };
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
bot.action('change_category', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:');
    ctx.session = { state: 'waiting_change_category_number' };
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
bot.action('delete_task', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    ctx.session = { state: 'waiting_delete_number' };
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
bot.action('show_by_category', async (ctx) => {
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    
    const categoryButtons = Object.values(userData.categories).map(cat => [
        Markup.button.callback(`–ü–æ–∫–∞–∑–∞—Ç—å ${cat.name}`, `show_category:${cat.id}`)
    ]);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:',
        Markup.inlineKeyboard(categoryButtons)
    );
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
bot.action(/show_category:(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    
    const categoryId = ctx.match[1];
    const category = userData.categories[categoryId];

    const activeTasks = userData.tasks.active
        .filter(task => task.category === categoryId)
        .map((task, index) =>
            `${index + 1}. ${task.title}\nüìÖ ${formatDate(task.dueDate)}`
        ).join('\n');

    const completedTasks = userData.tasks.completed
        .filter(task => task.category === categoryId)
        .map((task, index) =>
            `${index + 1}. ‚úÖ ${task.title}\nüìÖ ${formatDate(task.dueDate)}`
        ).join('\n');

    const message =
        `üè∑ –ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}":\n\n` +
        'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n' +
        (activeTasks || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á') +
        '\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n' +
        (completedTasks || '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

    await ctx.reply(message);
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
bot.action(/change_task_category:(.+)/, async (ctx) => {
    if (ctx.session?.state === 'waiting_new_category' &&
        typeof ctx.session.taskToChange === 'number') {

        const userId = ctx.from.id;
        const userData = initializeUserData(userId);
        
        const categoryId = ctx.match[1];
        const taskIndex = ctx.session.taskToChange;

        if (taskIndex >= 0 && taskIndex < userData.tasks.active.length) {
            userData.tasks.active[taskIndex].category = categoryId;
            saveData();
            await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üè∑');
        } else {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
        }
    }

    delete ctx.session;
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action('add_category', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    ctx.session = { state: 'waiting_category_name' };
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
bot.action(/calendar:(\d+):(-?\d+)/, async (ctx) => {
    const [_, yearStr, monthStr] = ctx.match;
    const year = parseInt(yearStr);
    const month = parseInt(monthStr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    const date = new Date(year, month);
    if (date.getFullYear() < new Date().getFullYear() - 1 || 
        date.getFullYear() > new Date().getFullYear() + 5) {
        await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –ª–µ—Ç');
        return;
    }
    
    await ctx.editMessageReplyMarkup({
        inline_keyboard: createCalendarKeyboard(date)
    });
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
bot.action(/select_date:(no_date|(\d+):(\d+):(\d+))/, async (ctx) => {
    if (ctx.session?.state !== 'waiting_date') {
        await ctx.answerCbQuery();
        return;
    }
    
    const match = ctx.match[1];
    if (match === 'no_date') {
        ctx.session.newTask.dueDate = null;
    } else {
        const [year, month, day] = match.split(':').map(Number);
        const date = new Date(year, month, day);
        ctx.session.newTask.dueDate = date.toISOString();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    const userId = ctx.from.id;
    const userData = initializeUserData(userId);
    userData.tasks.active.unshift({
        ...ctx.session.newTask,
        originalPosition: userData.tasks.active.length
    });
    
    saveData();
    await ctx.editMessageText(
        '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëç\n' +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.session.newTask.title}\n` +
        `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${userData.categories[ctx.session.newTask.category].name}\n` +
        `–î–∞—Ç–∞: ${formatDate(ctx.session.newTask.dueDate)}`
    );
    
    delete ctx.session;
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
bot.action('ignore', (ctx) => ctx.answerCbQuery());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
bot.action(/select_date:(no_date|(\d+):(\d+):(\d+))/, async (ctx) => {
    if (ctx.session?.state === 'waiting_new_date' && 
        typeof ctx.session.taskToChange === 'number') {
        
        const match = ctx.match[1];
        const userId = ctx.from.id;
        const userData = initializeUserData(userId);
        const taskIndex = ctx.session.taskToChange;
        
        if (taskIndex >= 0 && taskIndex < userData.tasks.active.length) {
            if (match === 'no_date') {
                userData.tasks.active[taskIndex].dueDate = null;
            } else {
                const [year, month, day] = match.split(':').map(Number);
                const date = new Date(year, month, day);
                userData.tasks.active[taskIndex].dueDate = date.toISOString();
            }
            
            saveData();
            await ctx.editMessageText(
                '–î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üìÖ\n' +
                `–ù–æ–≤–∞—è –¥–∞—Ç–∞: ${formatDate(userData.tasks.active[taskIndex].dueDate)}`
            );
            showTasksList(ctx);
        }
    }
    
    delete ctx.session;
    await ctx.answerCbQuery();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function generateCategoryId() {
    const timestamp = Date.now().toString(36);
    const randomPart = Math.random().toString(36).substr(2, 4);
    return `cat_${timestamp}_${randomPart}`;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadData();

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 