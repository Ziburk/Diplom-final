Объяснение ключей в базе данных

1. Составной ключ (Composite Key)

Что это?
- Это первичный ключ, состоящий из нескольких столбцов таблицы
- Используется, когда уникальность записи определяется комбинацией полей
- Все столбцы вместе образуют уникальный идентификатор записи

Пример из нашей базы данных (таблица categories):
```sql
CREATE TABLE categories (
    category_id VARCHAR(50),
    user_id INTEGER REFERENCES telegram_users(user_id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    -- другие поля...
    PRIMARY KEY (category_id, user_id),  -- вот он, составной ключ!
    UNIQUE(user_id, name)
);
```

Что это значит?
- Каждая категория идентифицируется парой значений (category_id, user_id)
- Может существовать несколько категорий с одинаковым category_id для разных пользователей
- Может существовать несколько категорий с одинаковым user_id
- Но комбинация (category_id, user_id) должна быть уникальной

2. Внешний ключ (Foreign Key)

Что это?
- Поле или набор полей, которые ссылаются на первичный ключ другой таблицы
- Обеспечивает связь между таблицами
- Гарантирует целостность данных

Примеры из нашей базы данных:

а) Простой внешний ключ (таблица tasks):
```sql
CREATE TABLE tasks (
    task_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES telegram_users(user_id) ON DELETE CASCADE,
    -- другие поля...
);
```

б) Составной внешний ключ (таблица tasks):
```sql
CREATE TABLE tasks (
    -- другие поля...
    FOREIGN KEY (category_id, user_id) REFERENCES categories(category_id, user_id) ON DELETE SET NULL
);
```

Что это значит?
- user_id в tasks должен существовать в telegram_users
- Пара (category_id, user_id) в tasks должна существовать в categories
- Нельзя создать задачу для несуществующего пользователя
- Нельзя назначить задаче несуществующую категорию

3. Каскадное удаление (ON DELETE CASCADE)

Что это?
- Автоматическое удаление связанных записей при удалении основной записи
- Помогает поддерживать целостность данных
- Предотвращает появление "висячих" ссылок

Примеры из нашей базы данных:

а) Удаление пользователя:
```sql
user_id INTEGER REFERENCES telegram_users(user_id) ON DELETE CASCADE
```
Что происходит:
1. Удаляется запись из telegram_users
2. Автоматически удаляются все категории этого пользователя
3. Автоматически удаляются все задачи этого пользователя
4. Автоматически удаляется вся история уведомлений

б) Особый случай - SET NULL при удалении категории:
```sql
FOREIGN KEY (category_id, user_id) REFERENCES categories(category_id, user_id) ON DELETE SET NULL
```
Что происходит:
1. При удалении категории
2. У всех задач этой категории
3. Поле category_id становится NULL
4. Задачи не удаляются, а становятся "без категории"

Практический пример:

1. Есть пользователь с id = 1
2. У него есть категория "Работа" (id = "work")
3. В этой категории есть задачи

При удалении пользователя:
- Удаляется запись пользователя
- Удаляется категория "Работа"
- Удаляются все его задачи
- Удаляются все уведомления

При удалении только категории:
- Категория удаляется
- Задачи остаются, но их category_id становится NULL
- Пользователь и уведомления остаются без изменений 